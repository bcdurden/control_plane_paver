---
resource_types:
- name: pivnet
  type: docker-image
  source:
    repository: pivotalcf/pivnet-resource
    tag: latest-final

resources:
- name: paver-automation
  type: git
  source:
    branch: master
    uri: git@github.com:bcdurden/control_plane_paver.git
    private_key: ((creds.github-key))

- name: platform-automation
  type: pivnet
  source:
    api_token: ((pivnet-token))
    product_slug: platform-automation
    product_version: (.*)
    sort_by: semver

- name: tf-state
  type: s3
  source:
    bucket: ((s3_pivnet_products_bucket))
    access_key_id: ((creds.aws-access-key))
    secret_access_key: ((creds.aws-secret-key))
    region_name: ((s3_region_name))
    versioned_file: terraform.tfstate
    initial_content_text: '{}'
    initial_version: 'empty-start'

- name: state
  type: s3
  source:
    access_key_id: ((creds.aws-access-key))
    secret_access_key: ((creds.aws-secret-key))
    region_name: ((s3_region_name))
    bucket: ((s3_pivnet_products_bucket))
    versioned_file: state/state.yml

jobs:
  - name: build-cert-image
    public: true
    plan:
    - get: paver-automation
    - get: platform-automation-image
      params:
        unpack: true
        globs:
          - "platform-automation-image*.tgz"
      resource: platform-automation
    - get: platform-automation-tasks
      params:
        unpack: true
        globs:
          - "platform-automation-tasks*.zip"
      resource: platform-automation
    - get: state

  - name: pave
    public: true
    plan:
      - get: paver-automation
      - get: tf-state

      - task: get-certs
        config:
          platform: linux
          image_resource:
            type: registry-image
            source: 
              repository: alpine
          inputs:
          - name: paver-automation
          params:
            TLS: ((tls-certificate))
          outputs:
            - name: tls-certificate
          run:
            path: sh
            args: ["paver-automation/custom_tasks/get_cert.sh"]

      - task: terraform
        config:
          platform: linux
          image_resource:
            type: registry-image
            source: 
              repository: hashicorp/terraform
              tag: 0.11.14
          inputs:
          - name: paver-automation
          - name: tls-certificate
          params:
            AWS_ACCESS_KEY_ID: ((creds.aws-access-key))
            AWS_SECRET_ACCESS_KEY: ((creds.aws-secret-key))
            AWS_DEFAULT_REGION: us-east-2
          outputs:
          - name: terraform-output
          run:
            path: sh
            args: ["paver-automation/custom_tasks/terraform.sh"]
        ensure: &put-state
          do:
          - put: tf-state
            params:
              file: terraform-output/terraform.tfstate

  - name: build-opsman
    public: true
    plan:
      - get: paver-automation
      - get: tf-state

      - task: get-tfstate-json
        config:
          platform: linux
          image_resource:
            type: registry-image
            source: 
              repository: hashicorp/terraform
              tag: 0.11.14
          inputs:
          - name: tf-state
          outputs:
          - name: terraform-output
          run:
            path: sh
            args: ["terraform", "output", "-json", "-state=tf-state/terraform.tfstate", ">", "terraform-output/tfstate.json"]
            
      - task: create-opsman-config
        image: platform-automation-image
        config:
          platform: linux
          inputs:
          - name: paver-automation
          - name: terraform-output
          params: 
            CONFIG_FILE_DIR: paver-automation/templates/opsman/((opsman_major_version))
            CONFIG_FILE: opsman-product-config.yml
          outputs:
          - name: opsman-config
          run:
            path: bash
            args: ["paver-automation/custom_tasks/create-opsman-config.sh"]

      # - task: download-opsman
      #   image: platform-automation-image
      #   file: platform-automation-tasks/tasks/download-product.yml
      #   params:
      #     CONFIG_FILE: templates/opsman/((opsman_version))/opsman-product-config.yml
      #   input_mapping:
      #     config: interpolated-configs
      #   output_mapping:
      #     downloaded-product: opsman-image 

      # - task: create-vm
      #   image: platform-automation-image
      #   file: platform-automation-tasks/tasks/create-vm.yml
      #   input_mapping:
      #     config: interpolated-configs
      #     image: opsman-image
      #     vars: interpolated-configs
      #   params:
      #     OPSMAN_CONFIG_FILE: templates/opsman/((opsman_version))/opsman.yml
      #     VARS_FILES: vars/environments/((foundation))/config-director/vars/opsman.yml
      #   ensure: &put-state
      #     do:
      #     - put: state
      #       params:
      #         file: generated-state/state.yml